-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Patient exposing (..)

import Api.Enum.Consultation_select_column
import Api.Enum.Patient_Profession_select_column
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias ConsultationsOptionalArguments =
    { distinct_on : OptionalArgument (List Api.Enum.Consultation_select_column.Consultation_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Api.InputObject.Consultation_order_by)
    , where_ : OptionalArgument Api.InputObject.Consultation_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
consultations : (ConsultationsOptionalArguments -> ConsultationsOptionalArguments) -> SelectionSet decodesTo Api.Object.Consultation -> SelectionSet (List decodesTo) Api.Object.Patient
consultations fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Api.Enum.Consultation_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Api.InputObject.encodeConsultation_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeConsultation_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Consultations" optionalArgs object_ (identity >> Decode.list)


type alias PatientProfessionsOptionalArguments =
    { distinct_on : OptionalArgument (List Api.Enum.Patient_Profession_select_column.Patient_Profession_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Api.InputObject.Patient_Profession_order_by)
    , where_ : OptionalArgument Api.InputObject.Patient_Profession_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
patient_Professions : (PatientProfessionsOptionalArguments -> PatientProfessionsOptionalArguments) -> SelectionSet decodesTo Api.Object.Patient_Profession -> SelectionSet (List decodesTo) Api.Object.Patient
patient_Professions fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Api.Enum.Patient_Profession_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Api.InputObject.encodePatient_Profession_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodePatient_Profession_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Patient_Professions" optionalArgs object_ (identity >> Decode.list)


code_postal : SelectionSet Int Api.Object.Patient
code_postal =
    Object.selectionForField "Int" "code_postal" [] Decode.int


date_de_naissance : SelectionSet Api.ScalarCodecs.Date Api.Object.Patient
date_de_naissance =
    Object.selectionForField "ScalarCodecs.Date" "date_de_naissance" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDate |> .decoder)


genre : SelectionSet String Api.Object.Patient
genre =
    Object.selectionForField "String" "genre" [] Decode.string


id_patient : SelectionSet Int Api.Object.Patient
id_patient =
    Object.selectionForField "Int" "id_patient" [] Decode.int


moyen_de_decouverte : SelectionSet String Api.Object.Patient
moyen_de_decouverte =
    Object.selectionForField "String" "moyen_de_decouverte" [] Decode.string


nom : SelectionSet String Api.Object.Patient
nom =
    Object.selectionForField "String" "nom" [] Decode.string


numero_rue : SelectionSet Int Api.Object.Patient
numero_rue =
    Object.selectionForField "Int" "numero_rue" [] Decode.int


pays : SelectionSet String Api.Object.Patient
pays =
    Object.selectionForField "String" "pays" [] Decode.string


prenom : SelectionSet String Api.Object.Patient
prenom =
    Object.selectionForField "String" "prenom" [] Decode.string


rue : SelectionSet String Api.Object.Patient
rue =
    Object.selectionForField "String" "rue" [] Decode.string


ville : SelectionSet String Api.Object.Patient
ville =
    Object.selectionForField "String" "ville" [] Decode.string
