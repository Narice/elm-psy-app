-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Agenda exposing (..)

import Api.Enum.Consultation_select_column
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias ConsultationsOptionalArguments =
    { distinct_on : OptionalArgument (List Api.Enum.Consultation_select_column.Consultation_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Api.InputObject.Consultation_order_by)
    , where_ : OptionalArgument Api.InputObject.Consultation_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
consultations : (ConsultationsOptionalArguments -> ConsultationsOptionalArguments) -> SelectionSet decodesTo Api.Object.Consultation -> SelectionSet (List decodesTo) Api.Object.Agenda
consultations fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Api.Enum.Consultation_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Api.InputObject.encodeConsultation_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeConsultation_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Consultations" optionalArgs object_ (identity >> Decode.list)


date : SelectionSet Api.ScalarCodecs.Date Api.Object.Agenda
date =
    Object.selectionForField "ScalarCodecs.Date" "date" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDate |> .decoder)


heure : SelectionSet Api.ScalarCodecs.Timetz Api.Object.Agenda
heure =
    Object.selectionForField "ScalarCodecs.Timetz" "heure" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecTimetz |> .decoder)


id_agenda : SelectionSet Int Api.Object.Agenda
id_agenda =
    Object.selectionForField "Int" "id_agenda" [] Decode.int
