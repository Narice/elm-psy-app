-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.Patient_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "Patient"

  - Code\_postal - column name
  - Date\_de\_naissance - column name
  - Genre - column name
  - Id\_patient - column name
  - Moyen\_de\_decouverte - column name
  - Nom - column name
  - Numero\_rue - column name
  - Pays - column name
  - Prenom - column name
  - Rue - column name
  - Ville - column name

-}
type Patient_update_column
    = Code_postal
    | Date_de_naissance
    | Genre
    | Id_patient
    | Moyen_de_decouverte
    | Nom
    | Numero_rue
    | Pays
    | Prenom
    | Rue
    | Ville


list : List Patient_update_column
list =
    [ Code_postal, Date_de_naissance, Genre, Id_patient, Moyen_de_decouverte, Nom, Numero_rue, Pays, Prenom, Rue, Ville ]


decoder : Decoder Patient_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "code_postal" ->
                        Decode.succeed Code_postal

                    "date_de_naissance" ->
                        Decode.succeed Date_de_naissance

                    "genre" ->
                        Decode.succeed Genre

                    "id_patient" ->
                        Decode.succeed Id_patient

                    "moyen_de_decouverte" ->
                        Decode.succeed Moyen_de_decouverte

                    "nom" ->
                        Decode.succeed Nom

                    "numero_rue" ->
                        Decode.succeed Numero_rue

                    "pays" ->
                        Decode.succeed Pays

                    "prenom" ->
                        Decode.succeed Prenom

                    "rue" ->
                        Decode.succeed Rue

                    "ville" ->
                        Decode.succeed Ville

                    _ ->
                        Decode.fail ("Invalid Patient_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Patient_update_column -> String
toString enum =
    case enum of
        Code_postal ->
            "code_postal"

        Date_de_naissance ->
            "date_de_naissance"

        Genre ->
            "genre"

        Id_patient ->
            "id_patient"

        Moyen_de_decouverte ->
            "moyen_de_decouverte"

        Nom ->
            "nom"

        Numero_rue ->
            "numero_rue"

        Pays ->
            "pays"

        Prenom ->
            "prenom"

        Rue ->
            "rue"

        Ville ->
            "ville"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Patient_update_column
fromString enumString =
    case enumString of
        "code_postal" ->
            Just Code_postal

        "date_de_naissance" ->
            Just Date_de_naissance

        "genre" ->
            Just Genre

        "id_patient" ->
            Just Id_patient

        "moyen_de_decouverte" ->
            Just Moyen_de_decouverte

        "nom" ->
            Just Nom

        "numero_rue" ->
            Just Numero_rue

        "pays" ->
            Just Pays

        "prenom" ->
            Just Prenom

        "rue" ->
            Just Rue

        "ville" ->
            Just Ville

        _ ->
            Nothing
