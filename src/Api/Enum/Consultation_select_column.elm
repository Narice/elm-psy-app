-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.Consultation_select_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "Consultation"

  - Id\_agenda - column name
  - Id\_patient - column name
  - Indice\_anxiete - column name
  - Mode\_de\_reglement - column name
  - Mots\_cles - column name
  - Prix - column name

-}
type Consultation_select_column
    = Id_agenda
    | Id_patient
    | Indice_anxiete
    | Mode_de_reglement
    | Mots_cles
    | Prix


list : List Consultation_select_column
list =
    [ Id_agenda, Id_patient, Indice_anxiete, Mode_de_reglement, Mots_cles, Prix ]


decoder : Decoder Consultation_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "id_agenda" ->
                        Decode.succeed Id_agenda

                    "id_patient" ->
                        Decode.succeed Id_patient

                    "indice_anxiete" ->
                        Decode.succeed Indice_anxiete

                    "mode_de_reglement" ->
                        Decode.succeed Mode_de_reglement

                    "mots_cles" ->
                        Decode.succeed Mots_cles

                    "prix" ->
                        Decode.succeed Prix

                    _ ->
                        Decode.fail ("Invalid Consultation_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Consultation_select_column -> String
toString enum =
    case enum of
        Id_agenda ->
            "id_agenda"

        Id_patient ->
            "id_patient"

        Indice_anxiete ->
            "indice_anxiete"

        Mode_de_reglement ->
            "mode_de_reglement"

        Mots_cles ->
            "mots_cles"

        Prix ->
            "prix"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Consultation_select_column
fromString enumString =
    case enumString of
        "id_agenda" ->
            Just Id_agenda

        "id_patient" ->
            Just Id_patient

        "indice_anxiete" ->
            Just Indice_anxiete

        "mode_de_reglement" ->
            Just Mode_de_reglement

        "mots_cles" ->
            Just Mots_cles

        "prix" ->
            Just Prix

        _ ->
            Nothing
