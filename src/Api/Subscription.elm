-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Subscription exposing (..)

import Api.Enum.Agenda_select_column
import Api.Enum.Consultation_select_column
import Api.Enum.Patient_Profession_select_column
import Api.Enum.Patient_select_column
import Api.Enum.Profession_select_column
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias AgendaOptionalArguments =
    { distinct_on : OptionalArgument (List Api.Enum.Agenda_select_column.Agenda_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Api.InputObject.Agenda_order_by)
    , where_ : OptionalArgument Api.InputObject.Agenda_bool_exp
    }


{-| fetch data from the table: "Agenda"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
agenda : (AgendaOptionalArguments -> AgendaOptionalArguments) -> SelectionSet decodesTo Api.Object.Agenda -> SelectionSet (List decodesTo) RootSubscription
agenda fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Api.Enum.Agenda_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Api.InputObject.encodeAgenda_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeAgenda_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Agenda" optionalArgs object_ (identity >> Decode.list)


type alias AgendaByPkRequiredArguments =
    { id_agenda : Int }


{-| fetch data from the table: "Agenda" using primary key columns
-}
agenda_by_pk : AgendaByPkRequiredArguments -> SelectionSet decodesTo Api.Object.Agenda -> SelectionSet (Maybe decodesTo) RootSubscription
agenda_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "Agenda_by_pk" [ Argument.required "id_agenda" requiredArgs.id_agenda Encode.int ] object_ (identity >> Decode.nullable)


type alias ConsultationOptionalArguments =
    { distinct_on : OptionalArgument (List Api.Enum.Consultation_select_column.Consultation_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Api.InputObject.Consultation_order_by)
    , where_ : OptionalArgument Api.InputObject.Consultation_bool_exp
    }


{-| fetch data from the table: "Consultation"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
consultation : (ConsultationOptionalArguments -> ConsultationOptionalArguments) -> SelectionSet decodesTo Api.Object.Consultation -> SelectionSet (List decodesTo) RootSubscription
consultation fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Api.Enum.Consultation_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Api.InputObject.encodeConsultation_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeConsultation_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Consultation" optionalArgs object_ (identity >> Decode.list)


type alias ConsultationByPkRequiredArguments =
    { id_agenda : Int
    , id_patient : Int
    }


{-| fetch data from the table: "Consultation" using primary key columns
-}
consultation_by_pk : ConsultationByPkRequiredArguments -> SelectionSet decodesTo Api.Object.Consultation -> SelectionSet (Maybe decodesTo) RootSubscription
consultation_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "Consultation_by_pk" [ Argument.required "id_agenda" requiredArgs.id_agenda Encode.int, Argument.required "id_patient" requiredArgs.id_patient Encode.int ] object_ (identity >> Decode.nullable)


type alias PatientOptionalArguments =
    { distinct_on : OptionalArgument (List Api.Enum.Patient_select_column.Patient_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Api.InputObject.Patient_order_by)
    , where_ : OptionalArgument Api.InputObject.Patient_bool_exp
    }


{-| fetch data from the table: "Patient"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
patient : (PatientOptionalArguments -> PatientOptionalArguments) -> SelectionSet decodesTo Api.Object.Patient -> SelectionSet (List decodesTo) RootSubscription
patient fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Api.Enum.Patient_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Api.InputObject.encodePatient_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodePatient_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Patient" optionalArgs object_ (identity >> Decode.list)


type alias PatientProfessionOptionalArguments =
    { distinct_on : OptionalArgument (List Api.Enum.Patient_Profession_select_column.Patient_Profession_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Api.InputObject.Patient_Profession_order_by)
    , where_ : OptionalArgument Api.InputObject.Patient_Profession_bool_exp
    }


{-| fetch data from the table: "Patient\_Profession"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
patient_Profession : (PatientProfessionOptionalArguments -> PatientProfessionOptionalArguments) -> SelectionSet decodesTo Api.Object.Patient_Profession -> SelectionSet (List decodesTo) RootSubscription
patient_Profession fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Api.Enum.Patient_Profession_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Api.InputObject.encodePatient_Profession_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodePatient_Profession_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Patient_Profession" optionalArgs object_ (identity >> Decode.list)


type alias PatientProfessionByPkRequiredArguments =
    { id_patient : Int
    , id_profession : Int
    }


{-| fetch data from the table: "Patient\_Profession" using primary key columns
-}
patient_Profession_by_pk : PatientProfessionByPkRequiredArguments -> SelectionSet decodesTo Api.Object.Patient_Profession -> SelectionSet (Maybe decodesTo) RootSubscription
patient_Profession_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "Patient_Profession_by_pk" [ Argument.required "id_patient" requiredArgs.id_patient Encode.int, Argument.required "id_profession" requiredArgs.id_profession Encode.int ] object_ (identity >> Decode.nullable)


type alias PatientByPkRequiredArguments =
    { id_patient : Int }


{-| fetch data from the table: "Patient" using primary key columns
-}
patient_by_pk : PatientByPkRequiredArguments -> SelectionSet decodesTo Api.Object.Patient -> SelectionSet (Maybe decodesTo) RootSubscription
patient_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "Patient_by_pk" [ Argument.required "id_patient" requiredArgs.id_patient Encode.int ] object_ (identity >> Decode.nullable)


type alias ProfessionOptionalArguments =
    { distinct_on : OptionalArgument (List Api.Enum.Profession_select_column.Profession_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Api.InputObject.Profession_order_by)
    , where_ : OptionalArgument Api.InputObject.Profession_bool_exp
    }


{-| fetch data from the table: "Profession"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
profession : (ProfessionOptionalArguments -> ProfessionOptionalArguments) -> SelectionSet decodesTo Api.Object.Profession -> SelectionSet (List decodesTo) RootSubscription
profession fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Api.Enum.Profession_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Api.InputObject.encodeProfession_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeProfession_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Profession" optionalArgs object_ (identity >> Decode.list)


type alias ProfessionByPkRequiredArguments =
    { id_profession : Int }


{-| fetch data from the table: "Profession" using primary key columns
-}
profession_by_pk : ProfessionByPkRequiredArguments -> SelectionSet decodesTo Api.Object.Profession -> SelectionSet (Maybe decodesTo) RootSubscription
profession_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "Profession_by_pk" [ Argument.required "id_profession" requiredArgs.id_profession Encode.int ] object_ (identity >> Decode.nullable)
