-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.Profession_constraint exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| unique or primary key constraints on table "Profession"

  - Profession\_id\_key - unique or primary key constraint
  - Profession\_pkey - unique or primary key constraint

-}
type Profession_constraint
    = Profession_id_key
    | Profession_pkey


list : List Profession_constraint
list =
    [ Profession_id_key, Profession_pkey ]


decoder : Decoder Profession_constraint
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "Profession_id_key" ->
                        Decode.succeed Profession_id_key

                    "Profession_pkey" ->
                        Decode.succeed Profession_pkey

                    _ ->
                        Decode.fail ("Invalid Profession_constraint type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Profession_constraint -> String
toString enum =
    case enum of
        Profession_id_key ->
            "Profession_id_key"

        Profession_pkey ->
            "Profession_pkey"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Profession_constraint
fromString enumString =
    case enumString of
        "Profession_id_key" ->
            Just Profession_id_key

        "Profession_pkey" ->
            Just Profession_pkey

        _ ->
            Nothing
