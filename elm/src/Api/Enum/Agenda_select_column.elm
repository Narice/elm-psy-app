-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.Agenda_select_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "Agenda"

  - Date - column name
  - Heure - column name
  - Id\_agenda - column name

-}
type Agenda_select_column
    = Date
    | Heure
    | Id_agenda


list : List Agenda_select_column
list =
    [ Date, Heure, Id_agenda ]


decoder : Decoder Agenda_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "date" ->
                        Decode.succeed Date

                    "heure" ->
                        Decode.succeed Heure

                    "id_agenda" ->
                        Decode.succeed Id_agenda

                    _ ->
                        Decode.fail ("Invalid Agenda_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Agenda_select_column -> String
toString enum =
    case enum of
        Date ->
            "date"

        Heure ->
            "heure"

        Id_agenda ->
            "id_agenda"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Agenda_select_column
fromString enumString =
    case enumString of
        "date" ->
            Just Date

        "heure" ->
            Just Heure

        "id_agenda" ->
            Just Id_agenda

        _ ->
            Nothing
